#include <stdio.h>
#include <limits.h>
#include <stdlib.h>

int
main(int argc, char** argv)
{
    if (argc < 2) {
        return 0;
    }
    for( int i = 1; i < argc; ++i) {
        char *s = argv[i];
        long long int max = INT_MIN;
        long long int min = INT_MAX;
        while (*s != '\0') {
            if (*s == ',') {
                ++s;
            }
            long long int a = strtol (s, &s, 10);
            if (a > max) {
                max = a;
            }
            if (a < min) {
                min = a;
            }
        }
        printf ("%lld\n", max - min + 1);
    }
    return 0;
}

На стандартном потоке ввода до признака конца файла вводится последовательность беззнаковых 32-битных целых чисел. Каждое считанное число закодируйте по следующим правилам и на стандартный поток вывода напечатайте байты закодированного числа в шестнадцатеричном виде.

Число произвольной битности кодируется последовательностью 8-битных октетов переменной длины. Для этого оно разбивается на группы по 7 бит, кодирование в выходную последовательность выполняется в порядке от младшей группы к старшей. Старшие (ведущие) нулевые группы бит в выходной поток не кодируются. У старшей ненулевой группы бит старший бит не устанавливается, а у всех остальных (младших) кодируемых групп бит старший бит устанавливается в 1. Число 0 кодируется октетом 0. Таким образом старший бит октета является флагом продолжения и означает, что старшие группы бит числа будут записаны в последующих октетах.

Таким образом, числа от 0 до 127 кодируются одним октетом, числа от 128 до 16383 кодируются двумя октетами, числа от 16384 до 2097151 кодируются тремя октетами и т. д. Число 130 кодируется следующим образом: его двоичное представление 10000010 разбивается на группы по 7 бит которые записываются от младшей к старшей: 0000010 0000001. Затем у первой (младшей) группы седьмой (старший) бит октета устанавливается равным 1, а у второй (старшей) группы - 0. Получаем два октета: 10000010 00000001. В шестнадцатеричном виде они запишутся 82 01.
