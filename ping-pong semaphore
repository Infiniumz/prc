#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <wait.h>
#include <fcntl.h>

int
main(int arg, char **argv)
{
    int n = strtol(argv[1], NULL, 10);
    setbuf(stdin, NULL);
    key_t key = 1;
    int smid = semget(key, n, IPC_CREAT | 0666);
    struct sembuf po = {0, 1, SEM_UNDO};
    semop(smid, &po, 1);
    pid_t *parr = calloc(n, sizeof(*parr));
    for (int i = 0; i < n; ++i) {
        pid_t pid;
        if (!(pid = fork())) {
            while (1) {
                struct sembuf p = {i, -1, SEM_UNDO};
                semop(smid, &p, 1);
                int t;
                if (scanf("%d", &t) == EOF) {
                    _exit(0);
                }
                printf ("%d %d\n", i, t);
                fflush(stdout);
                int nxt = t % n;
                if (nxt < 0) {
                    nxt += n;
                }
                struct sembuf v = {nxt, 1, SEM_UNDO};
                semop(smid, &v, 1);
            }
        } else {
            parr[i] = pid;
        }
    }
    wait(NULL);
    for (int i = 0; i < n; ++i) {
        kill(parr[i], SIGTERM);
    }
    for (int i = 0; i < n; ++i) {
        wait(NULL);
    }
    semctl(smid, n, IPC_RMID);
    free(parr);
    return 0;
}
